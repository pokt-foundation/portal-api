name: Testnet Deployment

on:
  push:
    branches: [testnet]

jobs:
  deploy:
    name: Gateway
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_GATEWAY_CLIENT_PRIVATE_KEY: ${{ secrets.POCKET_NETWORK_TESTNET_CLIENT_PRIVATE_KEY }}
          envkey_GATEWAY_CLIENT_PASSPHRASE: ${{ secrets.POCKET_NETWORK_TESTNET_CLIENT_PASSPHRASE }}
          envkey_MONGO_ENDPOINT: ${{ secrets.MONGO_TESTNET_ENDPOINT }}
          envkey_DATABASE_ENCRYPTION_KEY: ${{ secrets.DATABASE_TESTNET_ENCRYPTION_KEY }}
          envkey_DISPATCH_URL: https://node1.testnet.pokt.network,https://node2.testnet.pokt.network,https://node3.testnet.pokt.network
          envkey_ALTRUISTS: ${{ secrets.POCKET_NETWORK_PRODUCTION_ALTRUISTS }}
          envkey_REDIRECTS: ${{ secrets.POCKET_NETWORK_PRODUCTION_REDIRECTS }}
          envkey_REDIS_PORT: 6379
          envkey_POCKET_SESSION_BLOCK_FREQUENCY: 4
          envkey_POCKET_BLOCK_TIME: 1038000
          envkey_POCKET_RELAY_RETRIES: 0
          envkey_DEFAULT_SYNC_ALLOWANCE: 5
          envkey_DEFAULT_LOG_LIMIT_BLOCKS: 10000
          envkey_NODE_TLS_REJECT_UNAUTHORIZED: ''
          envkey_AAT_PLAN: ''
          envkey_NODE_ENV: ''
          envkey_INFLUX_URL: ''
          envkey_INFLUX_ORG: ''
          envkey_INFLUX_TOKEN: ''
          envkey_PSQL_CONNECTION: ''
          envkey_LOG_TO_CLOUDWATCH: ''
          envkey_AWS_ACCESS_KEY_ID: ''
          envkey_AWS_SECRET_ACCESS_KEY: ''
          envkey_COMMIT_HASH: ${{ github.sha }}
          envkey_ARCHIVAL_CHAINS: '0022,0028,0010,000A,000B,000C'
          envkey_LOG_TO_DATADOG: false
          envkey_DATADOG_API_KEY: false
          envkey_ALWAYS_REDIRECT_TO_ALTRUISTS: false
          envkey_SILENT_LOGGING: true
          envkey_REDIS_ENDPOINT: dashboard-testnet.js6zbp.ng.0001.usw2.cache.amazonaws.com
          envkey_REGION: 'us-west-2'
          envkey_REGION_NAME: 'testnet'
          file_name: .env

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: gateway-testnet
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID / us-west-2 - gateway
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: pocket-gateway/tasks/testnet/ecs-task-testnet.json
          container-name: gateway-testnet
          image: ${{ steps.build-image.outputs.image }}
          # Needs to be set at container level to be read by the dd agent
          environment-variables: |
            DD_RUNTIME_METRICS_ENABLED=true
            DD_PROFILING_ENABLED=true
            DD_SERVICE=/new-testnet/us-west-2/ecs/gateway
            DD_VERSION=${{ github.sha }}
            DD_ENV=testnet
            DD_AGENT_HOST=datadog-agent

      - name: Fill in the new image ID / us-west-2 - datadog-agent
        id: task-def-us-west-2-datadog-agent
        uses: aws-actions/amazon-ecs-render-task-definition@master
        with:
          task-definition: ${{ steps.task-def-us-west-2-gateway.outputs.task-definition }}
          container-name: datadog-agent
          image: gcr.io/datadoghq/agent:latest
          environment-variables: |
            DD_API_KEY=${{ secrets.DATADOG_API_KEY }}
            DD_SITE=datadoghq.eu
            DD_LOGS_ENABLED=false
            DD_APM_ENABLED=true
            DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true

      - name: Deploy / us-west-2
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: gateway-testnet
          cluster: gateway-testnet
          wait-for-service-stability: true
