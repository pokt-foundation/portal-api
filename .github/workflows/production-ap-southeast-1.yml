name: Production Deployment ap-southeast-1

on:
  push:
    branches: [master]

jobs:
  deploy:
    name: Gateway
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Make envfile ap-southeast-1
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_GATEWAY_CLIENT_PRIVATE_KEY: ${{ secrets.POCKET_NETWORK_PRODUCTION_CLIENT_PRIVATE_KEY }}
          envkey_GATEWAY_CLIENT_PASSPHRASE: ${{ secrets.POCKET_NETWORK_PRODUCTION_CLIENT_PASSPHRASE }}
          envkey_MONGO_ENDPOINT: ${{ secrets.MONGO_PRODUCTION_ENDPOINT }}
          envkey_DATABASE_ENCRYPTION_KEY: ${{ secrets.DATABASE_PRODUCTION_ENCRYPTION_KEY }}
          envkey_DISPATCH_URL: https://mainnet-1.nodes.pokt.network:4201,https://mainnet-2.nodes.pokt.network:4202,https://mainnet-3.nodes.pokt.network:4203,https://mainnet-4.nodes.pokt.network:4204,https://mainnet-5.nodes.pokt.network:4205,https://mainnet-6.nodes.pokt.network:4206,https://mainnet-7.nodes.pokt.network:4207,https://mainnet-8.nodes.pokt.network:4208,https://mainnet-9.nodes.pokt.network:4209,https://mainnet-10.nodes.pokt.network:4210,https://mainnet-11.nodes.pokt.network:4211,https://mainnet-12.nodes.pokt.network:4212,https://mainnet-13.nodes.pokt.network:4213,https://mainnet-14.nodes.pokt.network:4214,https://mainnet-15.nodes.pokt.network:4215,https://mainnet-16.nodes.pokt.network:4216,https://mainnet-17.nodes.pokt.network:4217,https://mainnet-18.nodes.pokt.network:4218,https://mainnet-19.nodes.pokt.network:4219,https://mainnet-20.nodes.pokt.network:4220,https://mainnet-21.nodes.pokt.network:4221,https://mainnet-22.nodes.pokt.network:4222,https://mainnet-23.nodes.pokt.network:4223,https://mainnet-24.nodes.pokt.network:4224
          envkey_ALTRUISTS: ${{ secrets.POCKET_NETWORK_PRODUCTION_ALTRUISTS }}
          envkey_REDIRECTS: ${{ secrets.POCKET_NETWORK_PRODUCTION_REDIRECTS }}
          envkey_REDIS_ENDPOINT: dashboard.y2p8qe.ng.0001.apse1.cache.amazonaws.com:6379
          envkey_REDIS_PORT: 6379
          envkey_POCKET_SESSION_BLOCK_FREQUENCY: 4
          envkey_POCKET_BLOCK_TIME: 1038000
          envkey_POCKET_RELAY_RETRIES: 0
          envkey_DEFAULT_SYNC_ALLOWANCE: 5
          envkey_DEFAULT_LOG_LIMIT_BLOCKS: 10000
          envkey_NODE_TLS_REJECT_UNAUTHORIZED: 0
          envkey_AAT_PLAN: 'premium'
          envkey_NODE_ENV: 'production'
          envkey_REGION: 'ap-se-1'
          envkey_INFLUX_URL: 'https://influx.portal.pokt.network:8086'
          envkey_INFLUX_ORG: 'pocket'
          envkey_INFLUX_TOKEN: ${{ secrets.INFLUX_TOKEN }}
          envkey_PSQL_CONNECTION: ${{ secrets.PSQL_CONNECTION }}
          file_name: .env

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: gateway
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID / ap-southeast-1
        id: task-def-ap-southeast-1
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: pocket-gateway/ecs-task-ap-southeast-1.json
          container-name: gateway
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy / ap-southeast-1
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-ap-southeast-1.outputs.task-definition }}
          service: gateway-service
          cluster: gateway
          wait-for-service-stability: true
