name: us-west-2 Testnet Terraform Deployment

on:
  push:
    branches: [testnet-workflow]

jobs:
  deploy:
    name: Gateway
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_GATEWAY_CLIENT_PRIVATE_KEY: ${{ secrets.POCKET_NETWORK_TESTNET_CLIENT_PRIVATE_KEY }}
          envkey_GATEWAY_CLIENT_PASSPHRASE: ${{ secrets.POCKET_NETWORK_TESTNET_CLIENT_PASSPHRASE }}
          envkey_REDIS_LOCAL_TTL_FACTOR: ${{ secrets.REDIS_LOCAL_TTL_FACTOR }}
          envkey_MONGO_ENDPOINT: ${{ secrets.MONGO_TESTNET_ENDPOINT }}
          envkey_BLOCKED_ADDRESSES_URL: ${{ secrets.BLOCKED_ADDRESSES_URL }}
          envkey_PHD_BASE_URL: ${{ secrets.PHD_BASE_URL }}
          envkey_PHD_API_KEY: ${{ secrets.PHD_API_KEY }}
          envkey_DATABASE_ENCRYPTION_KEY: ${{ secrets.DATABASE_TESTNET_ENCRYPTION_KEY }}
          envkey_DISPATCH_URL: https://testnet-1.nodes.pokt.network:4201,https://testnet-2.nodes.pokt.network:4202,https://testnet-3.nodes.pokt.network:4203
          envkey_ALTRUISTS: ${{ secrets.ALTRUISTS_TESTNET }}
          envkey_REDIRECTS: ${{ secrets.POCKET_NETWORK_PRODUCTION_REDIRECTS }}
          envkey_LOCAL_REDIS_ENDPOINT: 172.17.0.1:6379
          envkey_REMOTE_REDIS_ENDPOINT: gateway-new-testnet-redis.js6zbp.clustercfg.usw2.cache.amazonaws.com
          envkey_REDIS_PORT: 6379
          envkey_POCKET_SESSION_BLOCK_FREQUENCY: 4
          envkey_POCKET_BLOCK_TIME: 900000
          envkey_POCKET_RELAY_RETRIES: 5
          envkey_DEFAULT_SYNC_ALLOWANCE: 5
          envkey_DEFAULT_LOG_LIMIT_BLOCKS: 10000
          envkey_AAT_PLAN: premium
          envkey_NODE_ENV: production
          envkey_INFLUX_URLS: ${{ secrets.INFLUX_URLS }}
          envkey_INFLUX_TOKENS: ${{ secrets.INFLUX_TOKENS }}
          envkey_INFLUX_ORGS: ${{ secrets.INFLUX_ORGS }}
          envkey_PSQL_CONNECTION: ${{ secrets.PSQL_CONNECTION }}
          envkey_PSQL_CERTIFICATE: https://s3.amazonaws.com/rds-downloads/rds-ca-2019-root.pem
          envkey_LOG_TO_CLOUDWATCH: false
          envkey_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          envkey_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          envkey_COMMIT_HASH: ${{ github.sha }}
          envkey_ARCHIVAL_CHAINS: '0002'
          envkey_LOG_TO_LOKI: ${{ secrets.LOG_TO_LOKI }}
          envkey_LOKI_BASIC_AUTH: ${{ secrets.LOKI_BASIC_AUTH }}
          envkey_LOKI_HOST: ${{ secrets.LOKI_HOST }}
          envkey_ALWAYS_REDIRECT_TO_ALTRUISTS: false
          envkey_SILENT_LOGGING: true
          envkey_LOG_CHERRY_PICKER_STATS: ${{ secrets.LOG_CHERRY_PICKER_STATS }}
          envkey_RATE_LIMITER_URL: ${{ secrets.RATE_LIMITER_URL }}
          envkey_RATE_LIMITER_TOKEN: ${{ secrets.RATE_LIMITER_TOKEN }}
          envkey_ALTRUIST_ONLY_CHAINS: ${{ secrets.ALTRUIST_ONLY_CHAINS }}
          envkey_GATEWAY_HOST: ${{ secrets.GATEWAY_HOST }}
          envkey_REGION: 'us-west-2'
          envkey_REGION_NAME: 'testnet'
          file_name: .env

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: gateway-new-testnet
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID / us-west-2 - gateway
        id: task-def-us-west-2-gateway
        uses: aws-actions/amazon-ecs-render-task-definition@master
        with:
          task-definition: pocket-gateway/tasks/testnet/ecs-task-definition.json
          container-name: gateway
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy / us-west-2
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-us-west-2-gateway.outputs.task-definition }}
          service: gateway-new-testnet
          cluster: gateway-new-testnet
          wait-for-service-stability: true
