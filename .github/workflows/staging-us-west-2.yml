# .github/workflows: DO NOT MODIFY HERE BUT RATHER REFER TO THEIR CORRESPONDING
# TEMPLATE IN THE POCKET-GATEWWAY FOLDER OTHERWISE YOUR CHANGES WILL BE OVERWRITTEN
name: Staging Deployment us-west-2

on:
  push:
    branches: [staging]

jobs:
  deploy:
    name: Gateway
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Make envfile us-west-2
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_GATEWAY_CLIENT_PRIVATE_KEY: ${{ secrets.POCKET_NETWORK_PRODUCTION_CLIENT_PRIVATE_KEY }}
          envkey_GATEWAY_CLIENT_PASSPHRASE: ${{ secrets.POCKET_NETWORK_PRODUCTION_CLIENT_PASSPHRASE }}
          envkey_MONGO_ENDPOINT: ${{ secrets.MONGO_PRODUCTION_ENDPOINT }}
          envkey_DATABASE_ENCRYPTION_KEY: ${{ secrets.DATABASE_PRODUCTION_ENCRYPTION_KEY }}
          envkey_DISPATCH_URL: https://dispatch-1.nodes.pokt.network:4201,https://dispatch-2.nodes.pokt.network:4202,https://dispatch-3.nodes.pokt.network:4203,https://dispatch-4.nodes.pokt.network:4204,https://dispatch-5.nodes.pokt.network:4205,https://dispatch-6.nodes.pokt.network:4206,https://dispatch-7.nodes.pokt.network:4207,https://dispatch-8.nodes.pokt.network:4208,https://dispatch-9.nodes.pokt.network:4209,https://dispatch-10.nodes.pokt.network:4210,https://dispatch-11.nodes.pokt.network:4211,https://dispatch-12.nodes.pokt.network:4212,https://dispatch-13.nodes.pokt.network:4213,https://dispatch-14.nodes.pokt.network:4214,https://dispatch-15.nodes.pokt.network:4215,https://dispatch-16.nodes.pokt.network:4216,https://dispatch-17.nodes.pokt.network:4217,https://dispatch-18.nodes.pokt.network:4218,https://dispatch-19.nodes.pokt.network:4219,https://dispatch-20.nodes.pokt.network:4220,https://dispatch-21.nodes.pokt.network:4221,https://dispatch-22.nodes.pokt.network:4222,https://dispatch-23.nodes.pokt.network:4223,https://dispatch-24.nodes.pokt.network:4224,https://dispatch-25.nodes.pokt.network:4225,https://dispatch-26.nodes.pokt.network:4226,https://dispatch-27.nodes.pokt.network:4227,https://dispatch-28.nodes.pokt.network:4228,https://dispatch-29.nodes.pokt.network:4229,https://dispatch-30.nodes.pokt.network:4230,https://dispatch-31.nodes.pokt.network:4231,https://dispatch-32.nodes.pokt.network:4232,https://dispatch-33.nodes.pokt.network:4233,https://dispatch-34.nodes.pokt.network:4234,https://dispatch-35.nodes.pokt.network:4235,https://dispatch-36.nodes.pokt.network:4236,https://dispatch-37.nodes.pokt.network:4237,https://dispatch-38.nodes.pokt.network:4238,https://dispatch-39.nodes.pokt.network:4239,https://dispatch-40.nodes.pokt.network:4240,https://dispatch-41.nodes.pokt.network:4241,https://dispatch-42.nodes.pokt.network:4242,https://dispatch-43.nodes.pokt.network:4243,https://dispatch-44.nodes.pokt.network:4244
          envkey_ALTRUISTS: ${{ secrets.POCKET_NETWORK_PRODUCTION_ALTRUISTS }}
          envkey_REDIRECTS: ${{ secrets.POCKET_NETWORK_PRODUCTION_REDIRECTS }}
          envkey_REDIS_PORT: 6379
          envkey_POCKET_SESSION_BLOCK_FREQUENCY: 4
          envkey_POCKET_BLOCK_TIME: 1038000
          envkey_POCKET_RELAY_RETRIES: 0
          envkey_DEFAULT_SYNC_ALLOWANCE: 5
          envkey_DEFAULT_LOG_LIMIT_BLOCKS: 10000
          envkey_NODE_TLS_REJECT_UNAUTHORIZED: 0
          envkey_AAT_PLAN: premium
          envkey_NODE_ENV: production
          envkey_INFLUX_URL: https://influx.portal.pokt.network:8086
          envkey_INFLUX_ORG: pocket
          envkey_INFLUX_TOKEN: ${{ secrets.INFLUX_TOKEN }}
          envkey_PSQL_CONNECTION: ${{ secrets.PSQL_CONNECTION }}
          envkey_LOG_TO_CLOUDWATCH: false
          envkey_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          envkey_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          envkey_COMMIT_HASH: ${{ github.sha }}
          envkey_ARCHIVAL_CHAINS: 0022,0028,0010,000A,000B,000C
          envkey_LOG_TO_DATADOG: true
          envkey_DATADOG_API_KEY: ${{ secrets.DATADOG_API_KEY }}
          envkey_ALWAYS_REDIRECT_TO_ALTRUISTS: ${{ secrets.ALWAYS_REDIRECT_TO_ALTRUISTS }}
          envkey_SILENT_LOGGING: true
          envkey_REDIS_ENDPOINT: gateway-staging-redis.js6zbp.clustercfg.usw2.cache.amazonaws.com
          envkey_REGION: 'us-west-2'
          envkey_REGION_NAME: 'staging'
          file_name: .env

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: gateway-staging
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID / us-west-2 - gateway
        id: task-def-us-west-2-gateway
        uses: aws-actions/amazon-ecs-render-task-definition@master
        with:
          task-definition: pocket-gateway/tasks/staging/ecs-task-definition.json
          container-name: gateway
          image: ${{ steps.build-image.outputs.image }}
          # Needs to be set at container level to be read by the dd agent
          environment-variables: |
            DD_RUNTIME_METRICS_ENABLED=true
            DD_PROFILING_ENABLED=true
            DD_SERVICE=/us-west-2/ecs/gateway-staging
            DD_VERSION=${{ github.sha }}
            DD_ENV=staging
            DD_AGENT_HOST=datadog-agent

      - name: Fill in the new image ID / us-west-2 - datadog-agent
        id: task-def-us-west-2-datadog-agent
        uses: aws-actions/amazon-ecs-render-task-definition@master
        with:
          task-definition: ${{ steps.task-def-us-west-2-gateway.outputs.task-definition }}
          container-name: datadog-agent
          image: datadog/agent:latest
          environment-variables: |
            DD_API_KEY=${{ secrets.DATADOG_API_KEY }}
            DD_SITE=datadoghq.eu
            DD_LOGS_ENABLED=false
            DD_APM_ENABLED=true
            DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true

      - name: Deploy / us-west-2
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-us-west-2-datadog-agent.outputs.task-definition }}
          service: gateway-staging
          cluster: gateway-staging
          wait-for-service-stability: true
