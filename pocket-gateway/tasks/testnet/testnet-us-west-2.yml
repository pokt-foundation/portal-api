# .github/workflows: DO NOT MODIFY HERE BUT RATHER REFER TO THEIR CORRESPONDING
# TEMPLATE IN THE POCKET-GATEWWAY FOLDER OTHERWISE YOUR CHANGES WILL BE OVERWRITTEN
{{! Template used to generate workflow file with shared-enviroments }}
{{=[[ ]]=}}
name: Testnet Deployment us-west-2

on:
  push:
    branches: [testnet]

jobs:
  deploy:
    name: Gateway
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Make envfile us-west-2
        uses: SpicyPizza/create-envfile@v1
        with:
          [[#shared_envs]]
          envkey_[[key]]: [[&value]]
          [[/shared_envs]]
          envkey_REDIS_ENDPOINT: dashboard-testnet.js6zbp.ng.0001.usw2.cache.amazonaws.com
          envkey_REGION: 'us-west-2'
          envkey_REGION_NAME: 'testnet'
          file_name: .env

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: gateway-testnet
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID / us-west-2 - gateway
        id: task-def-us-west-2-gateway
        uses: aws-actions/amazon-ecs-render-task-definition@master
        with:
          task-definition: pocket-gateway/tasks/testnet/ecs-task-testnet-definition.json
          container-name: gateway-testnet
          image: ${{ steps.build-image.outputs.image }}
          # Needs to be set at container level to be read by the dd agent
          environment-variables: |
            DD_RUNTIME_METRICS_ENABLED=true
            DD_PROFILING_ENABLED=true
            DD_SERVICE=/us-west-2/ecs/gateway
            DD_VERSION=${{ github.sha }}
            DD_ENV=testnet
            DD_AGENT_HOST=datadog-agent

      - name: Fill in the new image ID / us-west-2 - datadog-agent
        id: task-def-us-west-2-datadog-agent
        uses: aws-actions/amazon-ecs-render-task-definition@master
        with:
          task-definition: ${{ steps.task-def-us-west-2-gateway.outputs.task-definition }}
          container-name: datadog-agent
          image: gcr.io/datadoghq/agent:latest
          environment-variables: |
            DD_API_KEY=${{ secrets.DATADOG_API_KEY }}
            DD_SITE=datadoghq.eu
            DD_LOGS_ENABLED=false
            DD_APM_ENABLED=true
            DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true

      - name: Deploy / us-west-2
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-us-west-2-datadog-agent.outputs.task-definition }}
          service: gateway-testnet
          cluster: gateway-testnet
          wait-for-service-stability: true
